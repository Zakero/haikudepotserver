package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;

import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _NaturalLanguage was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NaturalLanguage extends AbstractDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final StringProperty<String> COUNTRY_CODE = PropertyFactory.createString("countryCode", String.class);
    public static final DateProperty<Timestamp> CREATE_TIMESTAMP = PropertyFactory.createDate("createTimestamp", Timestamp.class);
    public static final BaseProperty<Boolean> IS_POPULAR = PropertyFactory.createBase("isPopular", Boolean.class);
    public static final StringProperty<String> LANGUAGE_CODE = PropertyFactory.createString("languageCode", String.class);
    public static final DateProperty<Timestamp> MODIFY_TIMESTAMP = PropertyFactory.createDate("modifyTimestamp", Timestamp.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final StringProperty<String> SCRIPT_CODE = PropertyFactory.createString("scriptCode", String.class);

    protected String countryCode;
    protected Timestamp createTimestamp;
    protected Boolean isPopular;
    protected String languageCode;
    protected Timestamp modifyTimestamp;
    protected String name;
    protected String scriptCode;


    public String getCountryCode() {
        beforePropertyRead("countryCode");
        return this.countryCode;
    }

    public Timestamp getCreateTimestamp() {
        beforePropertyRead("createTimestamp");
        return this.createTimestamp;
    }

    public Boolean getIsPopular() {
        beforePropertyRead("isPopular");
        return this.isPopular;
    }

    public String getLanguageCode() {
        beforePropertyRead("languageCode");
        return this.languageCode;
    }

    public Timestamp getModifyTimestamp() {
        beforePropertyRead("modifyTimestamp");
        return this.modifyTimestamp;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public String getScriptCode() {
        beforePropertyRead("scriptCode");
        return this.scriptCode;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "countryCode":
                return this.countryCode;
            case "createTimestamp":
                return this.createTimestamp;
            case "isPopular":
                return this.isPopular;
            case "languageCode":
                return this.languageCode;
            case "modifyTimestamp":
                return this.modifyTimestamp;
            case "name":
                return this.name;
            case "scriptCode":
                return this.scriptCode;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "countryCode":
                this.countryCode = (String)val;
                break;
            case "createTimestamp":
                this.createTimestamp = (Timestamp)val;
                break;
            case "isPopular":
                this.isPopular = (Boolean)val;
                break;
            case "languageCode":
                this.languageCode = (String)val;
                break;
            case "modifyTimestamp":
                this.modifyTimestamp = (Timestamp)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "scriptCode":
                this.scriptCode = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.countryCode);
        out.writeObject(this.createTimestamp);
        out.writeObject(this.isPopular);
        out.writeObject(this.languageCode);
        out.writeObject(this.modifyTimestamp);
        out.writeObject(this.name);
        out.writeObject(this.scriptCode);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.countryCode = (String)in.readObject();
        this.createTimestamp = (Timestamp)in.readObject();
        this.isPopular = (Boolean)in.readObject();
        this.languageCode = (String)in.readObject();
        this.modifyTimestamp = (Timestamp)in.readObject();
        this.name = (String)in.readObject();
        this.scriptCode = (String)in.readObject();
    }

}
