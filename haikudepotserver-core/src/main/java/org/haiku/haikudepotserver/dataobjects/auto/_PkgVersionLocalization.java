package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;

import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.haiku.haikudepotserver.dataobjects.LocalizationContent;
import org.haiku.haikudepotserver.dataobjects.NaturalLanguage;
import org.haiku.haikudepotserver.dataobjects.PkgVersion;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _PkgVersionLocalization was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PkgVersionLocalization extends AbstractDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final DateProperty<Timestamp> CREATE_TIMESTAMP = PropertyFactory.createDate("createTimestamp", Timestamp.class);
    public static final DateProperty<Timestamp> MODIFY_TIMESTAMP = PropertyFactory.createDate("modifyTimestamp", Timestamp.class);
    public static final EntityProperty<LocalizationContent> DESCRIPTION_LOCALIZATION_CONTENT = PropertyFactory.createEntity("descriptionLocalizationContent", LocalizationContent.class);
    public static final EntityProperty<NaturalLanguage> NATURAL_LANGUAGE = PropertyFactory.createEntity("naturalLanguage", NaturalLanguage.class);
    public static final EntityProperty<PkgVersion> PKG_VERSION = PropertyFactory.createEntity("pkgVersion", PkgVersion.class);
    public static final EntityProperty<LocalizationContent> SUMMARY_LOCALIZATION_CONTENT = PropertyFactory.createEntity("summaryLocalizationContent", LocalizationContent.class);
    public static final EntityProperty<LocalizationContent> TITLE_LOCALIZATION_CONTENT = PropertyFactory.createEntity("titleLocalizationContent", LocalizationContent.class);

    protected Timestamp createTimestamp;
    protected Timestamp modifyTimestamp;

    protected Object descriptionLocalizationContent;
    protected Object naturalLanguage;
    protected Object pkgVersion;
    protected Object summaryLocalizationContent;
    protected Object titleLocalizationContent;

    public void setCreateTimestamp(Timestamp createTimestamp) {
        beforePropertyWrite("createTimestamp", this.createTimestamp, createTimestamp);
        this.createTimestamp = createTimestamp;
    }

    public Timestamp getCreateTimestamp() {
        beforePropertyRead("createTimestamp");
        return this.createTimestamp;
    }

    public void setModifyTimestamp(Timestamp modifyTimestamp) {
        beforePropertyWrite("modifyTimestamp", this.modifyTimestamp, modifyTimestamp);
        this.modifyTimestamp = modifyTimestamp;
    }

    public Timestamp getModifyTimestamp() {
        beforePropertyRead("modifyTimestamp");
        return this.modifyTimestamp;
    }

    public void setDescriptionLocalizationContent(LocalizationContent descriptionLocalizationContent) {
        setToOneTarget("descriptionLocalizationContent", descriptionLocalizationContent, true);
    }

    public LocalizationContent getDescriptionLocalizationContent() {
        return (LocalizationContent)readProperty("descriptionLocalizationContent");
    }

    public void setNaturalLanguage(NaturalLanguage naturalLanguage) {
        setToOneTarget("naturalLanguage", naturalLanguage, true);
    }

    public NaturalLanguage getNaturalLanguage() {
        return (NaturalLanguage)readProperty("naturalLanguage");
    }

    public void setPkgVersion(PkgVersion pkgVersion) {
        setToOneTarget("pkgVersion", pkgVersion, true);
    }

    public PkgVersion getPkgVersion() {
        return (PkgVersion)readProperty("pkgVersion");
    }

    public void setSummaryLocalizationContent(LocalizationContent summaryLocalizationContent) {
        setToOneTarget("summaryLocalizationContent", summaryLocalizationContent, true);
    }

    public LocalizationContent getSummaryLocalizationContent() {
        return (LocalizationContent)readProperty("summaryLocalizationContent");
    }

    public void setTitleLocalizationContent(LocalizationContent titleLocalizationContent) {
        setToOneTarget("titleLocalizationContent", titleLocalizationContent, true);
    }

    public LocalizationContent getTitleLocalizationContent() {
        return (LocalizationContent)readProperty("titleLocalizationContent");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "createTimestamp":
                return this.createTimestamp;
            case "modifyTimestamp":
                return this.modifyTimestamp;
            case "descriptionLocalizationContent":
                return this.descriptionLocalizationContent;
            case "naturalLanguage":
                return this.naturalLanguage;
            case "pkgVersion":
                return this.pkgVersion;
            case "summaryLocalizationContent":
                return this.summaryLocalizationContent;
            case "titleLocalizationContent":
                return this.titleLocalizationContent;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "createTimestamp":
                this.createTimestamp = (Timestamp)val;
                break;
            case "modifyTimestamp":
                this.modifyTimestamp = (Timestamp)val;
                break;
            case "descriptionLocalizationContent":
                this.descriptionLocalizationContent = val;
                break;
            case "naturalLanguage":
                this.naturalLanguage = val;
                break;
            case "pkgVersion":
                this.pkgVersion = val;
                break;
            case "summaryLocalizationContent":
                this.summaryLocalizationContent = val;
                break;
            case "titleLocalizationContent":
                this.titleLocalizationContent = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.createTimestamp);
        out.writeObject(this.modifyTimestamp);
        out.writeObject(this.descriptionLocalizationContent);
        out.writeObject(this.naturalLanguage);
        out.writeObject(this.pkgVersion);
        out.writeObject(this.summaryLocalizationContent);
        out.writeObject(this.titleLocalizationContent);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.createTimestamp = (Timestamp)in.readObject();
        this.modifyTimestamp = (Timestamp)in.readObject();
        this.descriptionLocalizationContent = in.readObject();
        this.naturalLanguage = in.readObject();
        this.pkgVersion = in.readObject();
        this.summaryLocalizationContent = in.readObject();
        this.titleLocalizationContent = in.readObject();
    }

}
