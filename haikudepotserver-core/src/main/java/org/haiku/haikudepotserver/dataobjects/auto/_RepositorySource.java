package org.haiku.haikudepotserver.dataobjects.auto;

import java.sql.Timestamp;
import java.util.List;

import org.apache.cayenne.exp.Property;
import org.haiku.haikudepotserver.dataobjects.Repository;
import org.haiku.haikudepotserver.dataobjects.RepositorySourceExtraIdentifier;
import org.haiku.haikudepotserver.dataobjects.RepositorySourceMirror;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _RepositorySource was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _RepositorySource extends AbstractDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ACTIVE = Property.create("active", Boolean.class);
    public static final Property<String> CODE = Property.create("code", String.class);
    public static final Property<String> FORCED_INTERNAL_BASE_URL = Property.create("forcedInternalBaseUrl", String.class);
    public static final Property<String> IDENTIFIER = Property.create("identifier", String.class);
    public static final Property<Timestamp> LAST_IMPORT_TIMESTAMP = Property.create("lastImportTimestamp", Timestamp.class);
    public static final Property<Repository> REPOSITORY = Property.create("repository", Repository.class);
    public static final Property<List<RepositorySourceExtraIdentifier>> REPOSITORY_SOURCE_EXTRA_IDENTIFIERS = Property.create("repositorySourceExtraIdentifiers", List.class);
    public static final Property<List<RepositorySourceMirror>> REPOSITORY_SOURCE_MIRRORS = Property.create("repositorySourceMirrors", List.class);

    public void setActive(Boolean active) {
        writeProperty("active", active);
    }
    public Boolean getActive() {
        return (Boolean)readProperty("active");
    }

    public void setCode(String code) {
        writeProperty("code", code);
    }
    public String getCode() {
        return (String)readProperty("code");
    }

    public void setForcedInternalBaseUrl(String forcedInternalBaseUrl) {
        writeProperty("forcedInternalBaseUrl", forcedInternalBaseUrl);
    }
    public String getForcedInternalBaseUrl() {
        return (String)readProperty("forcedInternalBaseUrl");
    }

    public void setIdentifier(String identifier) {
        writeProperty("identifier", identifier);
    }
    public String getIdentifier() {
        return (String)readProperty("identifier");
    }

    public void setLastImportTimestamp(Timestamp lastImportTimestamp) {
        writeProperty("lastImportTimestamp", lastImportTimestamp);
    }
    public Timestamp getLastImportTimestamp() {
        return (Timestamp)readProperty("lastImportTimestamp");
    }

    public void setRepository(Repository repository) {
        setToOneTarget("repository", repository, true);
    }

    public Repository getRepository() {
        return (Repository)readProperty("repository");
    }


    public void addToRepositorySourceExtraIdentifiers(RepositorySourceExtraIdentifier obj) {
        addToManyTarget("repositorySourceExtraIdentifiers", obj, true);
    }
    public void removeFromRepositorySourceExtraIdentifiers(RepositorySourceExtraIdentifier obj) {
        removeToManyTarget("repositorySourceExtraIdentifiers", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<RepositorySourceExtraIdentifier> getRepositorySourceExtraIdentifiers() {
        return (List<RepositorySourceExtraIdentifier>)readProperty("repositorySourceExtraIdentifiers");
    }


    public void addToRepositorySourceMirrors(RepositorySourceMirror obj) {
        addToManyTarget("repositorySourceMirrors", obj, true);
    }
    public void removeFromRepositorySourceMirrors(RepositorySourceMirror obj) {
        removeToManyTarget("repositorySourceMirrors", obj, true);
    }
    @SuppressWarnings("unchecked")
    public List<RepositorySourceMirror> getRepositorySourceMirrors() {
        return (List<RepositorySourceMirror>)readProperty("repositorySourceMirrors");
    }


}
