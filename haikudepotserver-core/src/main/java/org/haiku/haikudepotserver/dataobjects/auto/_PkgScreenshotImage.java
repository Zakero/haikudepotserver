package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.haiku.haikudepotserver.dataobjects.MediaType;
import org.haiku.haikudepotserver.dataobjects.PkgScreenshot;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _PkgScreenshotImage was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PkgScreenshotImage extends AbstractDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final BaseProperty<byte[]> DATA = PropertyFactory.createBase("data", byte[].class);
    public static final EntityProperty<MediaType> MEDIA_TYPE = PropertyFactory.createEntity("mediaType", MediaType.class);
    public static final EntityProperty<PkgScreenshot> PKG_SCREENSHOT = PropertyFactory.createEntity("pkgScreenshot", PkgScreenshot.class);

    protected byte[] data;

    protected Object mediaType;
    protected Object pkgScreenshot;

    public void setData(byte[] data) {
        beforePropertyWrite("data", this.data, data);
        this.data = data;
    }

    public byte[] getData() {
        beforePropertyRead("data");
        return this.data;
    }

    public void setMediaType(MediaType mediaType) {
        setToOneTarget("mediaType", mediaType, true);
    }

    public MediaType getMediaType() {
        return (MediaType)readProperty("mediaType");
    }

    public void setPkgScreenshot(PkgScreenshot pkgScreenshot) {
        setToOneTarget("pkgScreenshot", pkgScreenshot, true);
    }

    public PkgScreenshot getPkgScreenshot() {
        return (PkgScreenshot)readProperty("pkgScreenshot");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "data":
                return this.data;
            case "mediaType":
                return this.mediaType;
            case "pkgScreenshot":
                return this.pkgScreenshot;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "data":
                this.data = (byte[])val;
                break;
            case "mediaType":
                this.mediaType = val;
                break;
            case "pkgScreenshot":
                this.pkgScreenshot = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.data);
        out.writeObject(this.mediaType);
        out.writeObject(this.pkgScreenshot);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.data = (byte[])in.readObject();
        this.mediaType = in.readObject();
        this.pkgScreenshot = in.readObject();
    }

}
