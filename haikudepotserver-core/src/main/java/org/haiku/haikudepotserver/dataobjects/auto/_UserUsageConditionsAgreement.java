package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;

import org.apache.cayenne.exp.Property;
import org.haiku.haikudepotserver.dataobjects.User;
import org.haiku.haikudepotserver.dataobjects.UserUsageConditions;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _UserUsageConditionsAgreement was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _UserUsageConditionsAgreement extends AbstractDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ACTIVE = Property.create("active", Boolean.class);
    public static final Property<Timestamp> TIMESTAMP_AGREED = Property.create("timestampAgreed", Timestamp.class);
    public static final Property<User> USER = Property.create("user", User.class);
    public static final Property<UserUsageConditions> USER_USAGE_CONDITIONS = Property.create("userUsageConditions", UserUsageConditions.class);

    protected Boolean active;
    protected Timestamp timestampAgreed;

    protected Object user;
    protected Object userUsageConditions;

    public void setActive(Boolean active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

    public Boolean getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setTimestampAgreed(Timestamp timestampAgreed) {
        beforePropertyWrite("timestampAgreed", this.timestampAgreed, timestampAgreed);
        this.timestampAgreed = timestampAgreed;
    }

    public Timestamp getTimestampAgreed() {
        beforePropertyRead("timestampAgreed");
        return this.timestampAgreed;
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    public void setUserUsageConditions(UserUsageConditions userUsageConditions) {
        setToOneTarget("userUsageConditions", userUsageConditions, true);
    }

    public UserUsageConditions getUserUsageConditions() {
        return (UserUsageConditions)readProperty("userUsageConditions");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "timestampAgreed":
                return this.timestampAgreed;
            case "user":
                return this.user;
            case "userUsageConditions":
                return this.userUsageConditions;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (Boolean)val;
                break;
            case "timestampAgreed":
                this.timestampAgreed = (Timestamp)val;
                break;
            case "user":
                this.user = val;
                break;
            case "userUsageConditions":
                this.userUsageConditions = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.timestampAgreed);
        out.writeObject(this.user);
        out.writeObject(this.userUsageConditions);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (Boolean)in.readObject();
        this.timestampAgreed = (Timestamp)in.readObject();
        this.user = in.readObject();
        this.userUsageConditions = in.readObject();
    }

}
