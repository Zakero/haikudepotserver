package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;
import java.util.List;

import org.apache.cayenne.exp.property.BaseProperty;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.haiku.haikudepotserver.dataobjects.Architecture;
import org.haiku.haikudepotserver.dataobjects.Pkg;
import org.haiku.haikudepotserver.dataobjects.PkgVersionCopyright;
import org.haiku.haikudepotserver.dataobjects.PkgVersionLicense;
import org.haiku.haikudepotserver.dataobjects.PkgVersionLocalization;
import org.haiku.haikudepotserver.dataobjects.PkgVersionUrl;
import org.haiku.haikudepotserver.dataobjects.RepositorySource;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _PkgVersion was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PkgVersion extends AbstractDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final BaseProperty<Boolean> ACTIVE = PropertyFactory.createBase("active", Boolean.class);
    public static final DateProperty<Timestamp> CREATE_TIMESTAMP = PropertyFactory.createDate("createTimestamp", Timestamp.class);
    public static final DateProperty<Timestamp> IMPORT_TIMESTAMP = PropertyFactory.createDate("importTimestamp", Timestamp.class);
    public static final BaseProperty<Boolean> IS_LATEST = PropertyFactory.createBase("isLatest", Boolean.class);
    public static final StringProperty<String> MAJOR = PropertyFactory.createString("major", String.class);
    public static final StringProperty<String> MICRO = PropertyFactory.createString("micro", String.class);
    public static final StringProperty<String> MINOR = PropertyFactory.createString("minor", String.class);
    public static final DateProperty<Timestamp> MODIFY_TIMESTAMP = PropertyFactory.createDate("modifyTimestamp", Timestamp.class);
    public static final NumericProperty<Long> PAYLOAD_LENGTH = PropertyFactory.createNumeric("payloadLength", Long.class);
    public static final StringProperty<String> PRE_RELEASE = PropertyFactory.createString("preRelease", String.class);
    public static final NumericProperty<Integer> REVISION = PropertyFactory.createNumeric("revision", Integer.class);
    public static final NumericProperty<Long> VIEW_COUNTER = PropertyFactory.createNumeric("viewCounter", Long.class);
    public static final EntityProperty<Architecture> ARCHITECTURE = PropertyFactory.createEntity("architecture", Architecture.class);
    public static final EntityProperty<Pkg> PKG = PropertyFactory.createEntity("pkg", Pkg.class);
    public static final ListProperty<PkgVersionCopyright> PKG_VERSION_COPYRIGHTS = PropertyFactory.createList("pkgVersionCopyrights", PkgVersionCopyright.class);
    public static final ListProperty<PkgVersionLicense> PKG_VERSION_LICENSES = PropertyFactory.createList("pkgVersionLicenses", PkgVersionLicense.class);
    public static final ListProperty<PkgVersionLocalization> PKG_VERSION_LOCALIZATIONS = PropertyFactory.createList("pkgVersionLocalizations", PkgVersionLocalization.class);
    public static final ListProperty<PkgVersionUrl> PKG_VERSION_URLS = PropertyFactory.createList("pkgVersionUrls", PkgVersionUrl.class);
    public static final EntityProperty<RepositorySource> REPOSITORY_SOURCE = PropertyFactory.createEntity("repositorySource", RepositorySource.class);

    protected Boolean active;
    protected Timestamp createTimestamp;
    protected Timestamp importTimestamp;
    protected Boolean isLatest;
    protected String major;
    protected String micro;
    protected String minor;
    protected Timestamp modifyTimestamp;
    protected Long payloadLength;
    protected String preRelease;
    protected Integer revision;
    protected Long viewCounter;

    protected Object architecture;
    protected Object pkg;
    protected Object pkgVersionCopyrights;
    protected Object pkgVersionLicenses;
    protected Object pkgVersionLocalizations;
    protected Object pkgVersionUrls;
    protected Object repositorySource;

    public void setActive(Boolean active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

    public Boolean getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setCreateTimestamp(Timestamp createTimestamp) {
        beforePropertyWrite("createTimestamp", this.createTimestamp, createTimestamp);
        this.createTimestamp = createTimestamp;
    }

    public Timestamp getCreateTimestamp() {
        beforePropertyRead("createTimestamp");
        return this.createTimestamp;
    }

    public void setImportTimestamp(Timestamp importTimestamp) {
        beforePropertyWrite("importTimestamp", this.importTimestamp, importTimestamp);
        this.importTimestamp = importTimestamp;
    }

    public Timestamp getImportTimestamp() {
        beforePropertyRead("importTimestamp");
        return this.importTimestamp;
    }

    public void setIsLatest(Boolean isLatest) {
        beforePropertyWrite("isLatest", this.isLatest, isLatest);
        this.isLatest = isLatest;
    }

    public Boolean getIsLatest() {
        beforePropertyRead("isLatest");
        return this.isLatest;
    }

    public void setMajor(String major) {
        beforePropertyWrite("major", this.major, major);
        this.major = major;
    }

    public String getMajor() {
        beforePropertyRead("major");
        return this.major;
    }

    public void setMicro(String micro) {
        beforePropertyWrite("micro", this.micro, micro);
        this.micro = micro;
    }

    public String getMicro() {
        beforePropertyRead("micro");
        return this.micro;
    }

    public void setMinor(String minor) {
        beforePropertyWrite("minor", this.minor, minor);
        this.minor = minor;
    }

    public String getMinor() {
        beforePropertyRead("minor");
        return this.minor;
    }

    public void setModifyTimestamp(Timestamp modifyTimestamp) {
        beforePropertyWrite("modifyTimestamp", this.modifyTimestamp, modifyTimestamp);
        this.modifyTimestamp = modifyTimestamp;
    }

    public Timestamp getModifyTimestamp() {
        beforePropertyRead("modifyTimestamp");
        return this.modifyTimestamp;
    }

    public void setPayloadLength(Long payloadLength) {
        beforePropertyWrite("payloadLength", this.payloadLength, payloadLength);
        this.payloadLength = payloadLength;
    }

    public Long getPayloadLength() {
        beforePropertyRead("payloadLength");
        return this.payloadLength;
    }

    public void setPreRelease(String preRelease) {
        beforePropertyWrite("preRelease", this.preRelease, preRelease);
        this.preRelease = preRelease;
    }

    public String getPreRelease() {
        beforePropertyRead("preRelease");
        return this.preRelease;
    }

    public void setRevision(Integer revision) {
        beforePropertyWrite("revision", this.revision, revision);
        this.revision = revision;
    }

    public Integer getRevision() {
        beforePropertyRead("revision");
        return this.revision;
    }

    public void setViewCounter(Long viewCounter) {
        beforePropertyWrite("viewCounter", this.viewCounter, viewCounter);
        this.viewCounter = viewCounter;
    }

    public Long getViewCounter() {
        beforePropertyRead("viewCounter");
        return this.viewCounter;
    }

    public void setArchitecture(Architecture architecture) {
        setToOneTarget("architecture", architecture, true);
    }

    public Architecture getArchitecture() {
        return (Architecture)readProperty("architecture");
    }

    public void setPkg(Pkg pkg) {
        setToOneTarget("pkg", pkg, true);
    }

    public Pkg getPkg() {
        return (Pkg)readProperty("pkg");
    }

    public void addToPkgVersionCopyrights(PkgVersionCopyright obj) {
        addToManyTarget("pkgVersionCopyrights", obj, true);
    }

    public void removeFromPkgVersionCopyrights(PkgVersionCopyright obj) {
        removeToManyTarget("pkgVersionCopyrights", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PkgVersionCopyright> getPkgVersionCopyrights() {
        return (List<PkgVersionCopyright>)readProperty("pkgVersionCopyrights");
    }

    public void addToPkgVersionLicenses(PkgVersionLicense obj) {
        addToManyTarget("pkgVersionLicenses", obj, true);
    }

    public void removeFromPkgVersionLicenses(PkgVersionLicense obj) {
        removeToManyTarget("pkgVersionLicenses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PkgVersionLicense> getPkgVersionLicenses() {
        return (List<PkgVersionLicense>)readProperty("pkgVersionLicenses");
    }

    public void addToPkgVersionLocalizations(PkgVersionLocalization obj) {
        addToManyTarget("pkgVersionLocalizations", obj, true);
    }

    public void removeFromPkgVersionLocalizations(PkgVersionLocalization obj) {
        removeToManyTarget("pkgVersionLocalizations", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PkgVersionLocalization> getPkgVersionLocalizations() {
        return (List<PkgVersionLocalization>)readProperty("pkgVersionLocalizations");
    }

    public void addToPkgVersionUrls(PkgVersionUrl obj) {
        addToManyTarget("pkgVersionUrls", obj, true);
    }

    public void removeFromPkgVersionUrls(PkgVersionUrl obj) {
        removeToManyTarget("pkgVersionUrls", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<PkgVersionUrl> getPkgVersionUrls() {
        return (List<PkgVersionUrl>)readProperty("pkgVersionUrls");
    }

    public void setRepositorySource(RepositorySource repositorySource) {
        setToOneTarget("repositorySource", repositorySource, true);
    }

    public RepositorySource getRepositorySource() {
        return (RepositorySource)readProperty("repositorySource");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "createTimestamp":
                return this.createTimestamp;
            case "importTimestamp":
                return this.importTimestamp;
            case "isLatest":
                return this.isLatest;
            case "major":
                return this.major;
            case "micro":
                return this.micro;
            case "minor":
                return this.minor;
            case "modifyTimestamp":
                return this.modifyTimestamp;
            case "payloadLength":
                return this.payloadLength;
            case "preRelease":
                return this.preRelease;
            case "revision":
                return this.revision;
            case "viewCounter":
                return this.viewCounter;
            case "architecture":
                return this.architecture;
            case "pkg":
                return this.pkg;
            case "pkgVersionCopyrights":
                return this.pkgVersionCopyrights;
            case "pkgVersionLicenses":
                return this.pkgVersionLicenses;
            case "pkgVersionLocalizations":
                return this.pkgVersionLocalizations;
            case "pkgVersionUrls":
                return this.pkgVersionUrls;
            case "repositorySource":
                return this.repositorySource;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (Boolean)val;
                break;
            case "createTimestamp":
                this.createTimestamp = (Timestamp)val;
                break;
            case "importTimestamp":
                this.importTimestamp = (Timestamp)val;
                break;
            case "isLatest":
                this.isLatest = (Boolean)val;
                break;
            case "major":
                this.major = (String)val;
                break;
            case "micro":
                this.micro = (String)val;
                break;
            case "minor":
                this.minor = (String)val;
                break;
            case "modifyTimestamp":
                this.modifyTimestamp = (Timestamp)val;
                break;
            case "payloadLength":
                this.payloadLength = (Long)val;
                break;
            case "preRelease":
                this.preRelease = (String)val;
                break;
            case "revision":
                this.revision = (Integer)val;
                break;
            case "viewCounter":
                this.viewCounter = (Long)val;
                break;
            case "architecture":
                this.architecture = val;
                break;
            case "pkg":
                this.pkg = val;
                break;
            case "pkgVersionCopyrights":
                this.pkgVersionCopyrights = val;
                break;
            case "pkgVersionLicenses":
                this.pkgVersionLicenses = val;
                break;
            case "pkgVersionLocalizations":
                this.pkgVersionLocalizations = val;
                break;
            case "pkgVersionUrls":
                this.pkgVersionUrls = val;
                break;
            case "repositorySource":
                this.repositorySource = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.createTimestamp);
        out.writeObject(this.importTimestamp);
        out.writeObject(this.isLatest);
        out.writeObject(this.major);
        out.writeObject(this.micro);
        out.writeObject(this.minor);
        out.writeObject(this.modifyTimestamp);
        out.writeObject(this.payloadLength);
        out.writeObject(this.preRelease);
        out.writeObject(this.revision);
        out.writeObject(this.viewCounter);
        out.writeObject(this.architecture);
        out.writeObject(this.pkg);
        out.writeObject(this.pkgVersionCopyrights);
        out.writeObject(this.pkgVersionLicenses);
        out.writeObject(this.pkgVersionLocalizations);
        out.writeObject(this.pkgVersionUrls);
        out.writeObject(this.repositorySource);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (Boolean)in.readObject();
        this.createTimestamp = (Timestamp)in.readObject();
        this.importTimestamp = (Timestamp)in.readObject();
        this.isLatest = (Boolean)in.readObject();
        this.major = (String)in.readObject();
        this.micro = (String)in.readObject();
        this.minor = (String)in.readObject();
        this.modifyTimestamp = (Timestamp)in.readObject();
        this.payloadLength = (Long)in.readObject();
        this.preRelease = (String)in.readObject();
        this.revision = (Integer)in.readObject();
        this.viewCounter = (Long)in.readObject();
        this.architecture = in.readObject();
        this.pkg = in.readObject();
        this.pkgVersionCopyrights = in.readObject();
        this.pkgVersionLicenses = in.readObject();
        this.pkgVersionLocalizations = in.readObject();
        this.pkgVersionUrls = in.readObject();
        this.repositorySource = in.readObject();
    }

}
