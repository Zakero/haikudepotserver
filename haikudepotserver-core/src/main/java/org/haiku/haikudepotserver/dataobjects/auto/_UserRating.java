package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.Timestamp;

import org.apache.cayenne.exp.Property;
import org.haiku.haikudepotserver.dataobjects.NaturalLanguage;
import org.haiku.haikudepotserver.dataobjects.PkgVersion;
import org.haiku.haikudepotserver.dataobjects.User;
import org.haiku.haikudepotserver.dataobjects.UserRatingStability;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _UserRating was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _UserRating extends AbstractDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Boolean> ACTIVE = Property.create("active", Boolean.class);
    public static final Property<String> CODE = Property.create("code", String.class);
    public static final Property<String> COMMENT = Property.create("comment", String.class);
    public static final Property<Timestamp> CREATE_TIMESTAMP = Property.create("createTimestamp", Timestamp.class);
    public static final Property<Timestamp> MODIFY_TIMESTAMP = Property.create("modifyTimestamp", Timestamp.class);
    public static final Property<Short> RATING = Property.create("rating", Short.class);
    public static final Property<NaturalLanguage> NATURAL_LANGUAGE = Property.create("naturalLanguage", NaturalLanguage.class);
    public static final Property<PkgVersion> PKG_VERSION = Property.create("pkgVersion", PkgVersion.class);
    public static final Property<User> USER = Property.create("user", User.class);
    public static final Property<UserRatingStability> USER_RATING_STABILITY = Property.create("userRatingStability", UserRatingStability.class);

    protected Boolean active;
    protected String code;
    protected String comment;
    protected Timestamp createTimestamp;
    protected Timestamp modifyTimestamp;
    protected Short rating;

    protected Object naturalLanguage;
    protected Object pkgVersion;
    protected Object user;
    protected Object userRatingStability;

    public void setActive(Boolean active) {
        beforePropertyWrite("active", this.active, active);
        this.active = active;
    }

    public Boolean getActive() {
        beforePropertyRead("active");
        return this.active;
    }

    public void setCode(String code) {
        beforePropertyWrite("code", this.code, code);
        this.code = code;
    }

    public String getCode() {
        beforePropertyRead("code");
        return this.code;
    }

    public void setComment(String comment) {
        beforePropertyWrite("comment", this.comment, comment);
        this.comment = comment;
    }

    public String getComment() {
        beforePropertyRead("comment");
        return this.comment;
    }

    public void setCreateTimestamp(Timestamp createTimestamp) {
        beforePropertyWrite("createTimestamp", this.createTimestamp, createTimestamp);
        this.createTimestamp = createTimestamp;
    }

    public Timestamp getCreateTimestamp() {
        beforePropertyRead("createTimestamp");
        return this.createTimestamp;
    }

    public void setModifyTimestamp(Timestamp modifyTimestamp) {
        beforePropertyWrite("modifyTimestamp", this.modifyTimestamp, modifyTimestamp);
        this.modifyTimestamp = modifyTimestamp;
    }

    public Timestamp getModifyTimestamp() {
        beforePropertyRead("modifyTimestamp");
        return this.modifyTimestamp;
    }

    public void setRating(Short rating) {
        beforePropertyWrite("rating", this.rating, rating);
        this.rating = rating;
    }

    public Short getRating() {
        beforePropertyRead("rating");
        return this.rating;
    }

    public void setNaturalLanguage(NaturalLanguage naturalLanguage) {
        setToOneTarget("naturalLanguage", naturalLanguage, true);
    }

    public NaturalLanguage getNaturalLanguage() {
        return (NaturalLanguage)readProperty("naturalLanguage");
    }

    public void setPkgVersion(PkgVersion pkgVersion) {
        setToOneTarget("pkgVersion", pkgVersion, true);
    }

    public PkgVersion getPkgVersion() {
        return (PkgVersion)readProperty("pkgVersion");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    public void setUserRatingStability(UserRatingStability userRatingStability) {
        setToOneTarget("userRatingStability", userRatingStability, true);
    }

    public UserRatingStability getUserRatingStability() {
        return (UserRatingStability)readProperty("userRatingStability");
    }

    protected abstract void onPostAdd();

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "active":
                return this.active;
            case "code":
                return this.code;
            case "comment":
                return this.comment;
            case "createTimestamp":
                return this.createTimestamp;
            case "modifyTimestamp":
                return this.modifyTimestamp;
            case "rating":
                return this.rating;
            case "naturalLanguage":
                return this.naturalLanguage;
            case "pkgVersion":
                return this.pkgVersion;
            case "user":
                return this.user;
            case "userRatingStability":
                return this.userRatingStability;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "active":
                this.active = (Boolean)val;
                break;
            case "code":
                this.code = (String)val;
                break;
            case "comment":
                this.comment = (String)val;
                break;
            case "createTimestamp":
                this.createTimestamp = (Timestamp)val;
                break;
            case "modifyTimestamp":
                this.modifyTimestamp = (Timestamp)val;
                break;
            case "rating":
                this.rating = (Short)val;
                break;
            case "naturalLanguage":
                this.naturalLanguage = val;
                break;
            case "pkgVersion":
                this.pkgVersion = val;
                break;
            case "user":
                this.user = val;
                break;
            case "userRatingStability":
                this.userRatingStability = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.active);
        out.writeObject(this.code);
        out.writeObject(this.comment);
        out.writeObject(this.createTimestamp);
        out.writeObject(this.modifyTimestamp);
        out.writeObject(this.rating);
        out.writeObject(this.naturalLanguage);
        out.writeObject(this.pkgVersion);
        out.writeObject(this.user);
        out.writeObject(this.userRatingStability);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.active = (Boolean)in.readObject();
        this.code = (String)in.readObject();
        this.comment = (String)in.readObject();
        this.createTimestamp = (Timestamp)in.readObject();
        this.modifyTimestamp = (Timestamp)in.readObject();
        this.rating = (Short)in.readObject();
        this.naturalLanguage = in.readObject();
        this.pkgVersion = in.readObject();
        this.user = in.readObject();
        this.userRatingStability = in.readObject();
    }

}
