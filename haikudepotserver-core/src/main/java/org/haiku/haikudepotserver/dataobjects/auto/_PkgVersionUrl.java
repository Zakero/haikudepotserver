package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.Property;
import org.haiku.haikudepotserver.dataobjects.PkgUrlType;
import org.haiku.haikudepotserver.dataobjects.PkgVersion;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _PkgVersionUrl was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PkgVersionUrl extends AbstractDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<PkgUrlType> PKG_URL_TYPE = Property.create("pkgUrlType", PkgUrlType.class);
    public static final Property<PkgVersion> PKG_VERSION = Property.create("pkgVersion", PkgVersion.class);

    protected String name;
    protected String url;

    protected Object pkgUrlType;
    protected Object pkgVersion;

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setPkgUrlType(PkgUrlType pkgUrlType) {
        setToOneTarget("pkgUrlType", pkgUrlType, true);
    }

    public PkgUrlType getPkgUrlType() {
        return (PkgUrlType)readProperty("pkgUrlType");
    }

    public void setPkgVersion(PkgVersion pkgVersion) {
        setToOneTarget("pkgVersion", pkgVersion, true);
    }

    public PkgVersion getPkgVersion() {
        return (PkgVersion)readProperty("pkgVersion");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "name":
                return this.name;
            case "url":
                return this.url;
            case "pkgUrlType":
                return this.pkgUrlType;
            case "pkgVersion":
                return this.pkgVersion;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "name":
                this.name = (String)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "pkgUrlType":
                this.pkgUrlType = val;
                break;
            case "pkgVersion":
                this.pkgVersion = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.name);
        out.writeObject(this.url);
        out.writeObject(this.pkgUrlType);
        out.writeObject(this.pkgVersion);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.name = (String)in.readObject();
        this.url = (String)in.readObject();
        this.pkgUrlType = in.readObject();
        this.pkgVersion = in.readObject();
    }

}
