package org.haiku.haikudepotserver.dataobjects.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.exp.property.EntityProperty;
import org.apache.cayenne.exp.property.NumericProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.haiku.haikudepotserver.dataobjects.Pkg;
import org.haiku.haikudepotserver.dataobjects.Repository;
import org.haiku.haikudepotserver.dataobjects.support.AbstractDataObject;

/**
 * Class _PkgUserRatingAggregate was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PkgUserRatingAggregate extends AbstractDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "id";

    public static final NumericProperty<Float> DERIVED_RATING = PropertyFactory.createNumeric("derivedRating", Float.class);
    public static final NumericProperty<Integer> DERIVED_RATING_SAMPLE_SIZE = PropertyFactory.createNumeric("derivedRatingSampleSize", Integer.class);
    public static final EntityProperty<Pkg> PKG = PropertyFactory.createEntity("pkg", Pkg.class);
    public static final EntityProperty<Repository> REPOSITORY = PropertyFactory.createEntity("repository", Repository.class);

    protected Float derivedRating;
    protected Integer derivedRatingSampleSize;

    protected Object pkg;
    protected Object repository;

    public void setDerivedRating(Float derivedRating) {
        beforePropertyWrite("derivedRating", this.derivedRating, derivedRating);
        this.derivedRating = derivedRating;
    }

    public Float getDerivedRating() {
        beforePropertyRead("derivedRating");
        return this.derivedRating;
    }

    public void setDerivedRatingSampleSize(Integer derivedRatingSampleSize) {
        beforePropertyWrite("derivedRatingSampleSize", this.derivedRatingSampleSize, derivedRatingSampleSize);
        this.derivedRatingSampleSize = derivedRatingSampleSize;
    }

    public Integer getDerivedRatingSampleSize() {
        beforePropertyRead("derivedRatingSampleSize");
        return this.derivedRatingSampleSize;
    }

    public void setPkg(Pkg pkg) {
        setToOneTarget("pkg", pkg, true);
    }

    public Pkg getPkg() {
        return (Pkg)readProperty("pkg");
    }

    public void setRepository(Repository repository) {
        setToOneTarget("repository", repository, true);
    }

    public Repository getRepository() {
        return (Repository)readProperty("repository");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "derivedRating":
                return this.derivedRating;
            case "derivedRatingSampleSize":
                return this.derivedRatingSampleSize;
            case "pkg":
                return this.pkg;
            case "repository":
                return this.repository;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "derivedRating":
                this.derivedRating = (Float)val;
                break;
            case "derivedRatingSampleSize":
                this.derivedRatingSampleSize = (Integer)val;
                break;
            case "pkg":
                this.pkg = val;
                break;
            case "repository":
                this.repository = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.derivedRating);
        out.writeObject(this.derivedRatingSampleSize);
        out.writeObject(this.pkg);
        out.writeObject(this.repository);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.derivedRating = (Float)in.readObject();
        this.derivedRatingSampleSize = (Integer)in.readObject();
        this.pkg = in.readObject();
        this.repository = in.readObject();
    }

}
