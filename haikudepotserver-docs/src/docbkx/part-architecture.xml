<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2018-2023, Andrew Lindesay
  ~ Distributed under the terms of the MIT License.
  -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="architecture">

    <title>Web / Application Server Architecture</title>

    <para>This section covers a broad architectural overview of the system.</para>

    <section xml:id="architecture-elements">
        <title>Elements</title>

        <figure id="architecture-elements-diagram">
            <title>Overview of the elements of the system's architecture and how they inter-relate.</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/img-architectureoverview.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            The application server deploy product is a self-contained java &quot;jar&quot; file.  The application
            is using the Spring Boot framework and can run itself using an embedded
            <ulink url="https://tomcat.apache.org/">Apache Tomcat</ulink> server.
        </para>

        <para>
            The application server communicates (see <link linkend="api">api</link>) with its clients using the HTTP
            protocol.  The communications are <emphasis>typically</emphasis> RPC style in nature, but also
            straight GET, POST and other requests are employed where appropriate.  The web-front end contains a
            JavaScript/HTML client that utilizes the same API as is employed by the &quot;Haiku Depot&quot;
            desktop application running on the Haiku operating system.
        </para>

        <figure id="haikudepot-desktop-screenshot">
            <title>Screenshot of the running HaikuDepot desktop application.</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="images/img-hd.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>

        <para>
            The application server will, when prompted or on a poll, import Haiku package repository data from
            configured Haiku package repositories.  To obtain this data it uses HTTP GET requests to obtain
            the &quot;.hpkr&quot; files from each repository.
        </para>

        <para>
            The application server stores all of its core data in a database.  It also uses local storage for
            temporary data storage.
        </para>

        <para>
            The application server uses the &quot;optipng&quot; tool on the deployment host in order to optimize image
            data.
        </para>

    </section>

    <section xml:id="architecture-applicationserverinfrastructure">
        <title>Application Server Infrastructure</title>

        <para>
            The application server uses a number of technologies to provide infrastructure for the application
            server.  The application server is based on
            <ulink url="https://spring.io/projects/spring-boot">SpringBoot</ulink> technology.
            You can find out more about those APIs in
            <link linkend="api">this</link> document.
        </para>

        <section xml:id="architecture-applicationserverinfrastructure-logging">
            <title>Logging</title>
            <para>
                The application server uses
                <ulink url="http://www.slf4j.org/">SLF4J</ulink>
                to provide for logging.  Other common logging frameworks are re-plumbed into SLF4J in order to
                centralize logging management.
            </para>
        </section>

        <section xml:id="architecture-applicationserverinfrastructure-ormanddata">
            <title>Object-Relational / Data</title>

            <figure id="cayenne-diagram">
                <title>Diagram of Apache Cayenne elements</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/img-diagram-cayenne.png" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                The object-relational mapping (ORM) technology used in the project is
                <ulink url="http://cayenne.apache.org/">Apache Cayenne</ulink>.
                Apache Cayenne has a different transaction-handling approach to other common java ORM solutions.  It
                maintains an in-memory model of the changes made in a context and then flushes those changes to the
                database when the context is committed.  For this reason, there is no notion of a &quot;database
                transaction per request&quot;.  The entities are described in a model file <footnote><para>
                There is a desktop-application editor for this model file.</para></footnote>.
                &quot;cayenne-haikudepotserver.xml&quot; and the java objects that represent those entities in the
                running application are in the java package &quot;org.haiku.haikudepotserver.dataobjects&quot;.  The
                application server has no formal DAO layer; queries are simply made from the ORM context.  Static
                methods on concrete entity objects provide easy access to common queries and
                various services such as &quot;PkgIconService&quot; and &quot;PasswordResetService&quot; provide
                higher level functionality in various logical areas of the application.
            </para>

            <para>
                Using the Cayenne &quot;listeners&quot; such as PostAddMutableCreateAndModifyTimestampListener and
                UserRatingDerivationTriggerListener the system is able to use changes to entities as a trigger to
                perform tasks such as update the create and modify timestamp attributes on entities.
            </para>

            <section>
                <title>Cayenne Query Caches</title>

                <para>
                    Caching data uses the Cayenne query caches.  These are defined on the
                    &quot;HaikuDepot#CacheGroup&quot; enum and are used in various Cayenne queries.  An example
                    would be on &quot;PkgIconImage#findForPkg(..)&quot;.  The caches are cleared by listening for
                    any change on the entity by using a listener.  These are configured as Spring beans in the
                    &quot;persistence.xml&quot; file.  This is fairly liberal cache eviction, but will work well
                    for the time being.
                </para>
            </section>

            <section>
                <title>Migration</title>

                <para>
                    On first-use the application server will populate the database schema-objects (tables, sequences
                    and so on) itself.  It does this with a library called
                    <ulink url="http://flywaydb.org/">Flyway</ulink>.
                    Later, as new versions of the application server are deployed, the application server will detect
                    that a database upgrade is required and run the necessary migration scripts.  The migration
                    scripts can be found in the source-code at
                    &quot;/haikudepotserver-webapp/src/main/resources/db/...&quot;
                </para>
            </section>

        </section>

        <section xml:id="architecture-applicationserverinfrastructure-multipage">
            <title>Multi-Page Web Interface</title>

            <para>
                The multi-page web interface is designed to provide a simplistic web experience with reduced features
                for lower-end browsers that have limited JavaScript support.  This interface is public-facing only in
                that it is not possible to meaningfully authenticate with the system when using the multi-page web
                interface.  This interface is constructed with the Spring MVC framework and Thymeleaf templating.  Pages
                are rendered server-side and delivered to the web browser.
            </para>
        </section>

        <section xml:id="architecture-applicationserverinfrastructure-singlepage">
            <title>Single-Page Web Interface</title>

            <para>
                The single-page interface is the primary web-based user interface for the system.  It provides
                functionality directed at public (unauthenticated), authenticated, administrative and root users.
                This interface is built using HTML and JavaScript in a &quot;Single Page Application&quot; (SPA)
                architecture.  The SPA interface uses the exact
                <emphasis>same</emphasis> APIs as the desktop Haiku Depot application and so is a true client of the
                application server.
            </para>

            <para>
                The whole system is treated as &quot;full stack&quot; and so the application server as well as the
                single-page interface are part of the same project and the same build-product.  The application server
                serves the resources required for the single-page interface.
            </para>

            <section>
                <title>AngularJS / Single Page</title>
            <para>
                The interface is driven by the
                <ulink url="https://angularjs.org/">AngularJS</ulink>
                JavaScript framework.  This framework provides for browser-side page rendering, navigational flow.
                You can find the AngularJS-centric resources at
                &quot;/haikudepotserver-webapp/src/main/webapp/js/app/...&quot;.  AngularJS is no longer supported.
            </para>
                </section>

            <section>
                <title>User State</title>
            <para>
                The &quot;user state&quot; including who is authenticated is stored in an AngularJS service within the
                browser's local storage.  The user state is not stored server-side in a &quot;session&quot; and the
                user's browser does not maintain reference to a cookie.  The user's authentication is instead
                communicated to the server based on a signed token.  The token has an expiry and so needs to be
                periodically refreshed.  Because of this, the user state logic in the client will communicate with
                the server to refresh the user's token from time to time.
            </para>
                </section>

            <section>
                <title>Localization</title>
            <para>
                Details about localization can be found under
                <link linkend="applicationlocalization">application localization</link>.
            </para>
                </section>

            <section>
                <title>Images</title>
            <para>
                Where possible, images used in the user interface are provided as SVG so that they can be rendered in
                a resolution-independent manner.
            </para>
                </section>

            <section>
                <title>Delivery</title>
            <para>
                The single-page interface is delivered by a single Thymeleaf page.
                The web resources such as the JavaScript
                files and CSS files are assembled in a separate module <code>haikudepotserver-spa1</code>
                which concatenates and compresses the resources and makes them available to the webapp.
            </para>
                </section>

        </section>

        <section xml:id="architecture-applicationserverinfrastructure-singlepage">
            <title>Security</title>

            <para>
                See <link linkend="security">the security section</link> for an overview of the authentication and
                authorization from the perspective of a user.
            </para>

            <para>
                Although the core Spring Framework is used, Spring Security is not employed in this application
                server in order to keep the security infrastructure relatively simple.
            </para>

            <section>
                <title>Authentication</title>

            <para>
                A servlet filter, AuthenticationFilter exists in the filter-chain in order to intercept any HTTP
                requests and, where appropriate, to detect an authentication.  If an authentication fails, the filter
                will not specifically respond; the request will proceed without a user associated with it.  If an
                authentication is successful then the user is stored in a thread local such that it may be accessed
                in downstream logic.  Authentication options include both Basic (base 64 username and password pair)
                as well as a token mechanism.
            </para>
                </section>

            <section>
                <title>Authorization</title>

            <para>
                API exists for answering queries relating to authorization.  The AuthorizationApi endpoint provides
                these services.  In this way clients are able to check for permissions to undertake operations on
                some resource.  The types of resources are;
            </para>

            <para>
                <itemizedlist>
                    <listitem>Package</listitem>
                    <listitem>User</listitem>
                    <listitem>Repository</listitem>
                    <listitem>User Rating</listitem>
                </itemizedlist>
            </para>

            <para>
                These are typically referenced by their natural or artificial identifier.  In the case of a package
                this would be the name of the package (eg; &quot;git&quot;, &quot;bemail&quot;).
                In the case of a user rating, this would be the user
                rating's code (eg; &quot;FA91FA34-D0BE-47A2-8114-CE33CACAE533&quot;).
            </para>

            <para>
                Permissions are defined on the &quot;Permission&quot; enum.  Examples of permissions include;
            </para>

            <para>
                <itemizedlist>
                    <listitem>REPOSITORY_EDIT</listitem>
                    <listitem>USER_CHANGEPASSWORD</listitem>
                    <listitem>PKG_EDITPROMINENCE</listitem>
                </itemizedlist>
            </para>

            <para>
                The client is expected to hide or show options or data in accordance with a user's security
                situation, but the application server will also enforce authorization server-side as the client
                uses API in the system.
            </para>

            <para>
                Permissions related to packages can be configured in the database on the PermissionUserPkg entity.
                Users can be assigned either a specific permission across all packages or for a specific package.  This
                way if a user is an owner of a package then they can be assigned special permissions on that package.
            </para>
                </section>

        </section>

        <section xml:id="architecture-applicationserverinfrastructure-email">
            <title>Email</title>

            <para>
                Email outbound from the application server includes;
            </para>

            <para>
                <itemizedlist>
                    <listitem>Forgotten password</listitem>
                </itemizedlist>
            </para>

            <para>
                Email is delivered with the Spring Framework's email support.  The email templates are produced
                with the
                <ulink url="http://freemarker.org/">Freemarker</ulink> library.  The templates for the emails are
                located at &quot;/haikudepotserver-webapp/src/main/resources/mail/...&quot;.
            </para>

        </section>

        <section xml:id="architecture-applicationserverinfrastructure-jobs">
            <title>Jobs</title>

            <para>
                The application must perform various background jobs from time to time that are impractical to
                have occur as part of an HTTP request or that are initiated from a process other than an HTTP
                request.  These are known as &quot;jobs&quot;.  Examples of situations where jobs are required
                include;
            </para>

            <para>
                <itemizedlist>
                    <listitem>Importing repository data</listitem>
                    <listitem>Generating a report of localization coverage</listitem>
                    <listitem>Importing a tar archive of package icons</listitem>
                </itemizedlist>
            </para>

            <figure id="architecture-applicationserverinfrastructure-jobs-classdiagram">
                <title>Class-diagram related to the jobs infrastructure.</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/img-jobsuml.png" format="PNG"/>
                    </imageobject>
                </mediaobject>
            </figure>

            <para>
                The figure above shows a number of the key classes that form the functionality of the jobs system.
                For each new job, there needs to be a concrete subclass of JobRunner and a corresponding
                concrete subclass of JobSpecification.
                Together these provide a means of defining the parameters of the job and a means
                of running the job.
            </para>

            <para>
                In general, manipulating, enqueueing and querying jobs is done through the JobService.
                The service will typically return results of type JobSnapshot to indicate the status of the running
                job.  The JobSnapshot instance is immutable.
                A job is identified by a GUID.  An example of a GUID would be
                &quot;98F4B8C0-2F42-4233-813D-AB90C60F6717&quot;.
            </para>

            <para>
                As a job progresses, it moves between a number of states;
            </para>

            <para>
            <orderedlist numeration="arabic">
                <listitem>INDETERMINATE</listitem>
                <listitem>QUEUED</listitem>
                <listitem>STARTED</listitem>
                <listitem>FINISHED, FAILED, CANCELLED</listitem>
            </orderedlist>
            </para>

            <para>
                The &quot;JobSnapshot&quot; will convey both the state and also the time at which a state transition
                occurred.
            </para>

            <section>
                <title>Job Data</title>
            <para>
                Some jobs require data inputs and outputs.  An example might be a package category import job.
                Such a job requires that a CSV file of changes is supplied and the job will export a new
                CSV file with a list of the changes made.  These input and output files are managed by the
                JobService and can be referred to by a GUID.
            </para>

            <para>
                The JobSpecification object will maintain a GUID for the supplied input data.  The supplied input
                data can be populated into the JobService ahead of creating the JobSpecification.  Various methods are
                exposed on the JobService to support the manipulation of job data.
            </para>

            <para>
                The JobService keeps track of generated output data and its association with a given job.
            </para>
            </section>

            <section>
                <title>Ownership</title>
            <para>
                The JobSpecification can store a User nickname in order to identify the owner of a job.
            </para>
                </section>

            <section>
                <title>Time to Live</title>
            <para>
                As the application server may be running a number of jobs over time, these would pile-up in the
                memory of the application server and data related to these reports would pile-up in storage.  To
                avoid this, jobs have a time-to-live which is specified as an attribute of the JobSpecification.
            </para>
            </section>

            <section>
                <title>Interfacing with Jobs</title>
                <para>
                    API specific to each JobRunner / JobSpecification is provided in order to allow a job to be started
                    from the web interface.
                </para>
                <para>
                    The JobController is able to allow the client to upload supplied input data and for the client
                    to download generated output data via HTTP POST and GET requests respectively.
                </para>
            </section>

        </section>

        <section xml:id="architecture-applicationserverinfrastructure-feeds">
            <title>Feeds</title>

            <para>
                The application server is able to produce Atom or RSS feeds that can provide updates relating to
                packages.  The feeds are in the context of one or many packages.  These are produced by the
                FeedController class which uses the
                <ulink url="http://rometools.github.io/rome/">Rome</ulink> library to render the feed to XML.  See
                the FeedService for further details about this process.
            </para>
        </section>

        <section xml:id="architecture-applicationserverinfrastructure-captcha">
            <title>Captcha</title>

            <para>
                For some operations such as creating a user or changing password, it is necessary to verify that the
                user is a human operator and not a machine.  To achieve this, a pictographic representation of a
                puzzle is shown to the user.  This has a simple textual response.  A mechanism for this is in the
                &quot;org.haikudepotserver.captcha&quot; package.
            </para>

            <para>
                A typical use pattern will involve the client first creating a captcha.  This creation process will
                yield a token for the captcha as well as an image to display to the human operator.  When the second
                API is used that requires the captcha response, the client's call will contain both the textual
                response from the human operator as well as the token to identify the captcha.
            </para>
        </section>

    </section>

</chapter>
