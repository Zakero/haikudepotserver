<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2015-2023, Andrew Lindesay
Distributed under the terms of the MIT License.
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="deployment">

    <title>Deployment</title>

    <para>
        This section outlines the approximate steps to deploy the web application-server.  The application-server
        build process produces a stand-alone self-executing &quot;jar&quot; file.
    </para>

    <section xml:id="deployment-versions">
        <title>Understanding Versions</title>

        <para>
            A maven project has a &quot;version&quot; which is either a final version such as &quot;2.3.1&quot;
            or is a &quot;snapshot&quot; version such as &quot;2.3.2-SNAPSHOT&quot;. The snapshot version is
            the work-in-progress for the next release. Once the snapshot is ready, a release is made wherein
            that source-code is fixed to the version number without the trailing &quot;-SNAPSHOT&quot; and then
            the snapshot version is incremented. The release yields a tag in the source code management system
            (git) in order to be able to reproduce the source-code for that release against a release version.
            The tag will have a form such as &quot;haikudepotserver-2.3.2&quot;.
        </para>
    </section>

    <section>
        <title>Undertaking a Release</title>

        <para>
            A Python script is provided to perform a release from the HEAD of the master branch.
            In the following example, the following assumed (ficticious) version numbers are used for
            demonstration purposes;
        </para>

        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Version</entry>
                        <entry>Purpose</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>1.2.3-SNAPSHOT</entry>
                        <entry>The version <emphasis>prior</emphasis> to release</entry>
                    </row>
                    <row>
                        <entry>1.2.3</entry>
                        <entry>The version of the release</entry>
                    </row>
                    <row>
                        <entry>1.2.4-SNAPSHOT</entry>
                        <entry>The version <emphasis>after</emphasis> the release</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>

        <para>
            The script performs the following steps;
        </para>

        <para>
            <itemizedlist>
                <listitem>Check the current version is of the form 1.2.3-SNAPSHOT</listitem>
                <listitem>Check all modules have the same version</listitem>
                <listitem>Update all modules to the version 1.2.3</listitem>
                <listitem>Git commit</listitem>
                <listitem>Git tag</listitem>
                <listitem>Update all modules to the version 1.2.4-SNAPSHOT</listitem>
                <listitem>Git commit</listitem>
            </itemizedlist>
        </para>

        <para>
            Prior to a release;
        </para>

        <para>
            <itemizedlist>
                <listitem>All changes should be committed</listitem>
                <listitem>A &quot;verify&quot; goal is run to ensure that automated testing passes</listitem>
                <listitem>A &quot;clean&quot; goal is run to clean out any build files</listitem>
            </itemizedlist>
        </para>

        <para>
            The following series of commands would orchestrate the release process;
        </para>

        <para>
            <programlisting>python3 support/hdsrelease.py
...
git push
git push --tags</programlisting>
        </para>
    </section>

    <section>
        <title>Obtaining Source for a Release and then Building Docker Image</title>

        <para>
            In order to obtain source code state for a specific release, first &quot;git pull&quot; any
            pending changes from the remote repository and then checkout the source at the particular tag;
            &quot;git checkout tags/haikudepotserver-2.3.2&quot;.
        </para>

        <para>
            From there it will be possible to create a build product for that particular release by
            initiating the build process.
        </para>

        <para>
            <programlisting>./build.sh</programlisting>
        </para>

        <para>
            This will trigger a multi-stage Docker build.  The first stage will pull down all of the
            dependencies of the build and will then build the build products.  The second stage will
            assemble the immutable Docker container that will run the HDS system.
        </para>
    </section>

    <section>
        <title>Haiku Vector Icon Rendering</title>
        <para>
            The hvif2png program is pre-built and included in the source as a
            binary resource; a tar-ball.
            This tar-ball is then unpacked and included in the Docker container image.  The
            application then uses the hvif2png tool at runtime to render HVIF icons as
            PNG for the SPA to display to end users on demand.
        </para>
    </section>

</chapter>
