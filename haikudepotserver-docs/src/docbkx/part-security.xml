<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2015-2017, Andrew Lindesay
Distributed under the terms of the MIT License.
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="security">

    <title>Security</title>

    <para>
        This section aims to outline the security-system employed.  The system does not use sessions and therefore
        exposes its web services in a stateless manner.  This implies that each request-response cycle is considered
        in isolation.
    </para>

    <warning>
        <para>
            Note that if you are using Haiku in a virtualized environment such as
            <ulink url="https://www.virtualbox.org/">VirtualBox</ulink>, you need to ensure that the virtualization
            system exposes UTC-relative time to the Haiku guest operating system, that Haiku is configured
            (see "Time Preferences") to use a GMT hardware clock and that your time-zone is set.
        </para>
    </warning>

    <section xml:id="security-authentication">
        <title>Authentication</title>

        <warning>
            <para>
                In a production environment, transport to and from the application server
                <emphasis>must</emphasis> use the &quot;https&quot; protocol in order to ensure that the payloads
                are not transmitted over networks in the clear.  The payloads will contain sensitive authentication
                data.
            </para>
        </warning>

        <para>
            Authentication of invocations for both REST and JSON-RPC uses
            &quot;token bearer authentication&quot;. The application does not support cookie-based sessions.  If
            the authentication fails then the request will continue unauthenticated; there is no 'challenge'
            necessarily returned back to the caller. A special API exists to provide a means to test a username
            and password authentication for the purposes of a login panel or similar;
            &quot;/__api/v2/user/authenticate-user&quot;. This endpoint will return a token if the authentication
            was successful.
        </para>

        <section xml:id="security-authentication-tokenbearer">
            <title>Token Bearer</title>

            <para>
                This is a system of authentication that relies on a token being supplied with a client API
                invocation to the server.  The client will first use the API &quot;UserApi.authenticateUser(..)&quot;
                to initially authenticate and obtain a token. This token can then be used to authenticate further
                API calls by including it in an HTTP header. An (abbreviated) example of the header might be;
                &quot;Authorization: Bearer eyJhbGciOiJIUzI.eyJleHAiOjE0MDM5NDY.1ifnDTLvX3A&quot;.
            </para>

            <para>
                The format and structure of the token conforms with the &quot;json web token&quot; standard.  These
                tokens are signed using a secret, will expire after a certain length of time and are specific to a
                given deployment environment.  The deployment environment is identified by configuring an
                &quot;issuer&quot;.  See <link linkend="config">the configuration chapter</link> for further details
                on configuration of these values.
            </para>

            <para>
                As the token has an expiry, an API method &quot;UserApi.renewToken(..)&quot; exists to obtain a
                fresh token before the existing token expires.  The expiry can be read from the token; read about
                &quot;json web tokens&quot; to find out how they work.
            </para>

            <para>
                The token bearer system of authentication has the advantage that although a user's password is
                supplied by the user to the client software for the initial authentication, subsequent requests do
                not need to convey the password.  In addition, the tokens expire and are unable to be employed after
                they have expired.
            </para>

            <section>
                <title>Token Bearer on GET Queries</title>

                <para>
                    Certain HTTP requests may be authenticated using a URL query parameter.  This approach only
                    applies when the URL path has a prefix &quot;/__secured/&quot; and when the URL is employed with
                    the HTTP &quot;GET&quot; method.  The query parameter key is &quot;hdsbtok&quot; and the value
                    is a &quot;json web token&quot; as described above.
                </para>

                <warning>
                    <para>
                        Be aware that use of this technique is likely result in the token being visible in the
                        user's browser history.  The token is subject to expiry, but may be able to be utilized
                        for some period after it has been employed in this way.
                    </para>
                </warning>
            </section>

        </section>

    </section>

    <section xml:id="security-authentication">
        <title>Authorization</title>

        <para>
            A user's ability to undertake some action is controlled by the authorization system.  In a given context,
            a user and a permission will be considered.  The enumeration &quot;Permission&quot; contains a list of
            the permissions that are enforced by the application.  Each permission is either with respect to the
            currently authenticated user or some target object.  Examples of some permissions and the type of target
            objects that they apply to are;
        </para>

        <informaltable>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Permission</entry>
                        <entry>Target</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>USER_CHANGEPASSWORD</entry>
                        <entry>A User</entry>
                    </row>
                    <row>
                        <entry>PKG_EDITSCREENSHOT</entry>
                        <entry>A Pkg</entry>
                    </row>
                    <row>
                        <entry>REPOSITORY_LIST</entry>
                        <entry>Current User</entry>
                    </row>
                </tbody>
            </tgroup>
        </informaltable>

        <para>
            There are inherent authorization rules that are encoded in the implementation of the method
            &quot;AuthorizationService.check(..)&quot; and there are also configurable rules that can be setup for
            certain permissions in relation to packages.  These are stored in the database via the entity
            &quot;PermissionUserPkg&quot;.  Note that a given &quot;PermissionUserPkg&quot; may have a null
            package associated with it and in this case, the rule applies to all packages.
        </para>

        <para>
            As part of an API invocation, an HTTP status 401 or 403 response maybe returned should authorization
            checks fail.
        </para>

    </section>

</chapter>