<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2015-2023, Andrew Lindesay
Distributed under the terms of the MIT License.
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="datamodel">

    <title>Data Model</title>

    <figure id="datamodel-diagram">
        <title>The persisted data model for the application server.</title>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/img-datamodel.png" format="PNG"/>
            </imageobject>
        </mediaobject>
    </figure>

    <para>
        The diagram above does not show &quot;modifyTimestamp&quot; nor does it show
        &quot;createTimestamp&quot;.
    </para>

    <section xml:id="datamodel-uniqueidentifiers">
        <title>Unique Identifiers</title>
        <para>
            In general, an &quot;code&quot; is used to identify instances of entities in the database.  For example,
            a UUID might be used such as &quot;7cc57be5-ca7b-4229-a00b-084b32a4e1c3&quot;.
            In some cases an existing natual key is already in place and so that attribute is used.  An
            example of this is the &quot;Pkg&quot; entity which is uniquely identified by its attribute &quot;name&quot;.  Note that the
            identifier is not the primary key.  In all cases, the database primary and foreign keys are artificial
            numerical identifiers that are supplied by sequences.
        </para>
    </section>

    <section>
        <title>Repositories</title>
        <para>
            A package is a cohesive piece of software or software sub-system for the Haiku operating system.  This
            might for example be an application such as &quot;bepdf&quot; or &quot;armyknife&quot; or a command
            line tool such as &quot;pari&quot;.
        </para>
        <para>
            Repositories are sources of packages.  A repository has a number of repository sources.  Each
            RepositorySource covers an Architecture and each RepositorySource can have a number of Mirrors.
            One Mirror is a "primary" Mirror for the repository and is where HaikuDepotServer will go to
            get updated data for this RepositorySource when it needs to.  A RepositorySourceMirror is
            associated with a Country and in this way it is possible to identify a good source of repository
            data to use dependent on a user's physical location.
        </para>
        <para>
            The RepositorySource contains an "identifier" field and this string acts as an identifier for
            the RepositorySource.
            The actual URLs where repository data can be fetched are found in the RepositorySourceMirror-s.
            You can find out more about this in the
            <link linkend="repositories">repository</link> section.
        </para>

        <para>
            Package versions' data is &quot;siloed&quot; between repositories, but some data such as localization,
            iconography and screenshots are shared.  This means that if you have the package &quot;bepdf&quot;
            made available in more than on repository, that package will share some aspects such as iconography
            and screenshots.
        </para>
    </section>

    <section>
        <title>Package Supplement</title>
        <para>
            Some packages are loosely in a relationship with a main package.  For example, the package
            &quot;aspell_devel&quot; is subordinate to &quot;aspell&quot; and &quot;qupzilla_x86&quot; is subordinate
            to &quot;qupzilla&quot;.  In such cases, a relationship exists, by naming convention, wherein the
            subordinate package should take on some of the meta-data of the main package.  The system
            achieves this through the PkgSupplement entity.  A PkgSupplement entity instance holds
            the relationship to icons, screenshots, changelogs and categories and then any related
            Pkg entity instances relate to that PkgSupplement.
        </para>
    </section>

    <section>
        <title>Package Supplement Modification</title>
        <para>
            Each time the user changes the Package Supplement (an icon, a screenshot, localization ...)
            then a record is made as to who changed this. Because the data may change over time a
            description of the change is captured instead of linking to the actual entity which has
            changed.
        </para>
        <para>
            The entry may not be linked to a user in the HDS system because the actual user who made the
            change might have come from another system altogether. In any case, the field
            &quot;user_description&quot; provides a description of user who did make the change.
        </para>
    </section>

    <section>
        <title>User Usage Conditions</title>
        <para>
            User usage conditions are the terms by which a user is able to use the HDS system.  These
            should be agreed to before the user is able to make use of the system.  These are loaded
            into the database from compile-time resources in the HDS source code and are loaded into
            the "UserUsageConditions" table.  In this way, the compile-time resources act like a
            migration.
        </para>
    </section>

    <section>
        <title>Natural Languages</title>
        <para>
            A natural language is something like German, Icelandic or Thai. The fallback language for HDS is
            English. A language is identified in the &quot;natural_language&quot; table by the following pieces
            of data;
        </para>

        <para>
            <itemizedlist>
                <listitem>
                    Language code; this is a 2 or 3 character lower case code such as &quot;fr&quot; or
                    &quot;fur&quot;. The standard for these codes is ISO-3166-1.
                </listitem>
                <listitem>
                    Country code; this is generally a two letter upper case code such as &quot;DE&quot;
                    or &quot;NZ&quot;. The standard for these code is ISO-3166 or sometimes a UN M49 code such as
                    &quot;419&quot; corresponding to Latin America and the Caribbean.
                </listitem>
                <listitem>
                    Script code; this is a 4 character code that has a leading upper-case such as
                    &quot;Latn&quot;. The standard for this is ISO-15924.
                </listitem>
            </itemizedlist>
        </para>

        <para>
            Sometimes the natural language is identified by the individual codes above or an overall code
            can be assembled by combining the codes above. The components are separated by a hyphen and ordering
            is language code, script code and then country code. For example &quot;en-US&quot; or
            &quot;sr-Latn-BA&quot;. On parse, either a hyphen or an underscore is accepted.
        </para>

        <para>
            An ORM class &quot;NaturalLanguage&quot; exists to express a natural language in the database.
            An in-memory representation is provided by &quot;NaturalLanguageCoordinate&quot; and
            an interface &quot;NaturalLanguageCoded&quot; defines accessors for the codes and is implemented by
            both &quot;NaturalLanguage&quot; and &quot;NaturalLanguageCoordinate&quot;.
        </para>

    </section>

</chapter>
