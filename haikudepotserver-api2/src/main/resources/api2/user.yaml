# Copyright 2021-2022, Andrew Lindesay
# Distributed under the terms of the MIT License.

openapi: 3.0.3
info:
  title: HDS User API
  version: "2.0"
  description: >
    This API defines operations that can be undertaken around users.
tags:
  - name: user
paths:

  /__api/v2/user/update-user:
    description: >
      This method will update the user based on the data in the request.  Only the data which is included
      in the filter will be updated.
    post:
      tags:
        - user
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateUserRequestEnvelope"
      responses:
        200:
          description: >
            The result of having updated the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/updateUserResponseEnvelope"

  /__api/v2/user/create-user:
    description: >
      This method will create a user in the system.  It is identified by a username
      and authenticated by a password.  The password is supplied in the clear.  This
      method will return not found in the case that the referenced 'natural language'
      is not able to be found.
    post:
      tags:
        - user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUserRequestEnvelope"
      responses:
        200:
          description: >
            The result of having created the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createUserResponseEnvelope"

  /__api/v2/user/get-user-usage-conditions:
    description: >
      This method will return details for the user usage agreement that is
      identifier in the request.
    post:
      tags:
        - user
      operationId: getUserUsageConditions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getUserUsageConditionsRequestEnvelope"
      responses:
        200:
          description: >
            The data detailing the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getUserUsageConditionsResponseEnvelope"


  /__api/v2/user/get-user:
    description: >
      This method will get the user identified by the nickname in the request object.
      If no user was able to be found then a not-found error is returned.
    post:
      tags:
        - user
      operationId: getUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/getUserRequestEnvelope"
      responses:
        200:
          description: >
            The data detailing the user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getUserResponseEnvelope"

  /__api/v2/user/authenticate-user:
    description: >
      This endpoint will allow a client to authenticate against the server.  If this is
      successful then it will return a json web token that can be used for further API
      calls for some period of time.  If it is unsuccessful then it will return null.
    post:
      tags:
        - user
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authenticateUserRequestEnvelope"
      responses:
        200:
          description: >
            The authentication result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authenticateUserResponseEnvelope"

  /__api/v2/user/renew-token:
    description: >
      This method will renew the token supplied.  If the token has expired then this
      method will return a null value for the token.
    post:
      tags:
        - user
      operationId: renewToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/renewTokenRequestEnvelope"
      responses:
        200:
          description: >
            The result of renewing an authentication token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/renewTokenResponseEnvelope"

  /__api/v2/user/change-password:
    description: >
      This method will allow the client to modify the password of a user.
    post:
      tags:
        - user
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changePasswordRequestEnvelope"
      responses:
        200:
          description: >
            The result of making the API call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/changePasswordResponseEnvelope"

  /__api/v2/user/search-users:
    description: >
      This method will allow a search for users.
    post:
      tags:
        - user
      operationId: searchUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/searchUsersRequestEnvelope"
      responses:
        200:
          description: >
            The result of making the API call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/searchUsersResponseEnvelope"

  /__api/v2/user/initiate-password-reset:
    description: >
      This method will kick-off a process to reset a user's password by email.  The user will be sent
      an email containing a URL.  They will then click on the URL which will take them to a page allowing
      them to reset their password.
    post:
      tags:
        - user
      operationId: initiatePasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/initiatePasswordResetRequestEnvelope"
      responses:
        200:
          description: >
            The result of making the API call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/initiatePasswordResetResponseEnvelope"

  /__api/v2/user/complete-password-reset:
    description: >
      This method will complete the password reset process by taking the token and a new password then
      configuring that password on the user.
    post:
      tags:
        - user
      operationId: completePasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/completePasswordResetRequestEnvelope"
      responses:
        200:
          description: >
            The result of making the API call.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/completePasswordResetResponseEnvelope"

  /__api/v2/user/agree-user-usage-conditions:
    description: >
      This method will allow the user to, at any time, agree to the terms
      and conditions.  This may be required for example when the terms change
      and the user has agreed to some older terms and conditions.
    post:
      tags:
        - user
      operationId: agreeUserUsageConditions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/agreeUserUsageConditionsRequestEnvelope"
      responses:
        200:
          description: >
            The agree to user usage conditions response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/agreeUserUsageConditionsResponseEnvelope"


components:
  schemas:

    agreeUserUsageConditionsRequestEnvelope:
      type: object
      properties:
        nickname:
          type: string
        userUsageConditionsCode:
          type: string
    agreeUserUsageConditionsResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/agreeUserUsageConditionsResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    agreeUserUsageConditionsResult:
      type: object

    updateUserRequestEnvelope:
      type: object
      properties:
        nickname:
          type: string
        naturalLanguageCode:
          type: string
        active:
          type: boolean
        email:
          type: string
        filter:
          type: array
          items:
            $ref: "#/components/schemas/updateUserFilter"
    updateUserResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/updateUserResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    updateUserResult:
      type: object
    updateUserFilter:
      type: string
      enum:
        - NATURALLANGUAGE
        - EMAIL
        - ACTIVE

    createUserRequestEnvelope:
      type: object
      properties:
        nickname:
          type: string
        passwordClear:
          type: string
        email:
          type: string
        captchaToken:
          type: string
          description: >
            The captcha token is obtained from an earlier invocation to the
            captcha API to get a captcha.  This identifies the captcha for
            which the captcha response should correlate.
        captchaResponse:
          type: string
          description: >
            This is the human-supplied text string that matches the image that would have been
            provided with the captcha that is identified by the cpatchaToken.
        naturalLanguageCode:
          type: string
          description: >
            This code comes from the "get all natural languages" endpoint.
        userUsageConditionsCode:
          type: string
    createUserResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/createUserResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    createUserResult:
      type: object

    getUserUsageConditionsRequestEnvelope:
      type: object
      properties:
        code:
          description: >
            If this value is NULL then it signifies that the latest
            user usage conditions should be provided.
          type: string
    getUserUsageConditionsResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/getUserUsageConditionsResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    getUserUsageConditionsResult:
      type: object
      properties:
        code:
          type: string
        minimumAge:
          type: integer
          format: int32

    getUserRequestEnvelope:
      type: object
      properties:
        nickname:
          type: string
    getUserResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/getUserResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    getUserResult:
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
        active:
          type: boolean
        isRoot:
          type: boolean
        createTimestamp:
          type: integer
          format: int64
        modifyTimestamp:
          type: integer
          format: int64
        naturalLanguageCode:
          type: string
        lastAuthenticationTimestamp:
          type: integer
          format: int64
        userUsageConditionsAgreement:
          description: >
            This relates to the user's required understanding of the terms of
            use.
          type: object
          properties:
            timestampAgreed:
              type: integer
              format: int64
            userUsageConditionsCode:
              description: >
                The code of the conditions agreed to.
              type: string
            isLatest:
              description: >
                Are the terms that the user agreed to current with the most
                recent wording.
              type: boolean

    authenticateUserRequestEnvelope:
      type: object
      properties:
        nickname:
          type: string
        passwordClear:
          type: string
    authenticateUserResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/authenticateUserResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    authenticateUserResult:
      type: object
      properties:
        token:
          type: string
          description: >
            In the case of a successful authentication, this field will be non-null and will contain a standard
            formatted json-web-token.  If the authentication had failed then this token will be null.

    renewTokenRequestEnvelope:
      type: object
      properties:
        token:
          type: string
    renewTokenResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/renewTokenResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    renewTokenResult:
      type: object
      properties:
        token:
          type: string

    changePasswordRequestEnvelope:
      type: object
      properties:
        nickname:
          type: string
        oldPasswordClear:
          type: string
        newPasswordClear:
          type: string
        captchaToken:
          type: string
        captchaResponse:
          type: string
    changePasswordResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/changePasswordResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    changePasswordResult:
      type: object

    searchUsersRequestEnvelope:
      allOf:
        - $ref: "./common.yaml#/components/schemas/abstractSearchRequest"
        - type: object
          properties:
            includeInactive:
              type: boolean
    searchUsersResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/searchUsersResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    searchUsersResult:
      type: object
      properties:
        total:
          type: integer
          format: int64
        items:
          type: array
          items:
            $ref: "#/components/schemas/searchUsersUser"
    searchUsersUser:
      type: object
      properties:
        nickname:
          type: string
        active:
          type: boolean

    initiatePasswordResetRequestEnvelope:
      type: object
      properties:
        email:
          type: string
        captchaToken:
          type: string
          description: >
            The captcha token is obtained from an earlier invocation to the
            {@link CaptchaApi} method to get
            a captcha.  This identifies the captcha for which the captcha response should
            correlate.
        captchaResponse:
          type: string
          description: >
            This is the human-supplied text string that matches the image that would have been
            provided with the captcha that is identified by the cpatchaToken.
    initiatePasswordResetResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/initiatePasswordResetResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    initiatePasswordResetResult:
      type: object

    completePasswordResetRequestEnvelope:
      type: object
      properties:
        token:
          type: string
        passwordClear:
          type: string
        captchaToken:
          type: string
          description: >
            The captcha token is obtained from an earlier invocation to the
            {@link CaptchaApi} method to get
            a captcha.  This identifies the captcha for which the captcha response should
            correlate.
        captchaResponse:
          type: string
          description: >
            This is the human-supplied text string that matches the image that would have been
            provided with the captcha that is identified by the captchaToken.
    completePasswordResetResponseEnvelope:
      type: object
      properties:
        result:
          $ref: "#/components/schemas/completePasswordResetResult"
        error:
          $ref: "./error.yaml#/components/schemas/error"
    completePasswordResetResult:
      type: object
